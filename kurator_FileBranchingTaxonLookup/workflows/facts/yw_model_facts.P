% FACT: program(program_id, program_name, qualified_program_name, begin_annotation_id, end_annotation_id).
program(1, 'DwCA_Taxon_Lookup', 'DwCA_Taxon_Lookup', 1, 74).
program(2, 'Setup', 'DwCA_Taxon_Lookup/Setup', 3, 11).
program(3, 'FileToDataStream', 'DwCA_Taxon_Lookup/FileToDataStream', 12, 16).
program(4, 'EnvironmentTagger', 'DwCA_Taxon_Lookup/EnvironmentTagger', 17, 24).
program(5, 'FilterToJustMarine', 'DwCA_Taxon_Lookup/FilterToJustMarine', 25, 32).
program(6, 'FilterToNonMarine', 'DwCA_Taxon_Lookup/FilterToNonMarine', 33, 40).
program(7, 'WoRMSLookup', 'DwCA_Taxon_Lookup/WoRMSLookup', 41, 49).
program(8, 'GBIFLookup', 'DwCA_Taxon_Lookup/GBIFLookup', 50, 58).
program(9, 'StreamMerge', 'DwCA_Taxon_Lookup/StreamMerge', 59, 64).
program(10, 'CsvFileWriter', 'DwCA_Taxon_Lookup/CsvFileWriter', 65, 71).

% FACT: workflow(program_id).
workflow(1).

% FACT: function(program_id).

% FACT: has_subprogram(program_id, subprogram_id).
has_subprogram(1, 2).
has_subprogram(1, 3).
has_subprogram(1, 4).
has_subprogram(1, 5).
has_subprogram(1, 6).
has_subprogram(1, 7).
has_subprogram(1, 8).
has_subprogram(1, 9).
has_subprogram(1, 10).

% FACT: port(port_id, port_type, port_name, qualified_port_name, port_annotation_id, data_id).
port(1, 'IN', 'DarwinCoreArchive', 'DwCA_Taxon_Lookup<-DarwinCoreArchive', 2, 1).
port(28, 'OUT', 'UpdatedOccurrenceFile', 'DwCA_Taxon_Lookup->UpdatedOccurrenceFile', 72, 14).
port(29, 'OUT', 'LogFile', 'DwCA_Taxon_Lookup->LogFile', 73, 15).
port(2, 'IN', 'DarwinCoreArchive', 'DwCA_Taxon_Lookup/Setup<-DarwinCoreArchive', 5, 2).
port(3, 'OUT', 'workspace', 'DwCA_Taxon_Lookup/Setup->workspace', 7, 3).
port(4, 'OUT', 'OccurrenceFile', 'DwCA_Taxon_Lookup/Setup->OccurrenceFile', 9, 4).
port(5, 'IN', 'OccurrenceFile', 'DwCA_Taxon_Lookup/FileToDataStream<-OccurrenceFile', 14, 4).
port(6, 'OUT', 'DataRecord', 'DwCA_Taxon_Lookup/FileToDataStream->DataRecord', 15, 5).
port(7, 'IN', 'DataRecord', 'DwCA_Taxon_Lookup/EnvironmentTagger<-DataRecord', 19, 5).
port(8, 'OUT', 'LogFile', 'DwCA_Taxon_Lookup/EnvironmentTagger->LogFile', 20, 6).
port(9, 'OUT', 'TaggedDataRecord', 'DwCA_Taxon_Lookup/EnvironmentTagger->TaggedDataRecord', 23, 7).
port(10, 'IN', 'TaggedDataRecord', 'DwCA_Taxon_Lookup/FilterToJustMarine<-TaggedDataRecord', 27, 7).
port(11, 'OUT', 'LogFile', 'DwCA_Taxon_Lookup/FilterToJustMarine->LogFile', 28, 6).
port(12, 'OUT', 'MarineDataRecord', 'DwCA_Taxon_Lookup/FilterToJustMarine->MarineDataRecord', 31, 8).
port(13, 'IN', 'TaggedDataRecord', 'DwCA_Taxon_Lookup/FilterToNonMarine<-TaggedDataRecord', 35, 7).
port(14, 'OUT', 'LogFile', 'DwCA_Taxon_Lookup/FilterToNonMarine->LogFile', 36, 6).
port(15, 'OUT', 'notMarineDataRecord', 'DwCA_Taxon_Lookup/FilterToNonMarine->notMarineDataRecord', 39, 9).
port(16, 'IN', 'MarineDataRecord', 'DwCA_Taxon_Lookup/WoRMSLookup<-MarineDataRecord', 43, 8).
port(17, 'OUT', 'WoRMSUpdatedRecord', 'DwCA_Taxon_Lookup/WoRMSLookup->WoRMSUpdatedRecord', 44, 10).
port(18, 'OUT', 'LogFile', 'DwCA_Taxon_Lookup/WoRMSLookup->LogFile', 45, 6).
port(19, 'IN', 'notMarineDataRecord', 'DwCA_Taxon_Lookup/GBIFLookup<-notMarineDataRecord', 52, 9).
port(20, 'OUT', 'GBIFUpdatedRecord', 'DwCA_Taxon_Lookup/GBIFLookup->GBIFUpdatedRecord', 53, 11).
port(21, 'OUT', 'LogFile', 'DwCA_Taxon_Lookup/GBIFLookup->LogFile', 54, 6).
port(22, 'IN', 'GBIFUpdatedRecord', 'DwCA_Taxon_Lookup/StreamMerge<-GBIFUpdatedRecord', 61, 11).
port(23, 'IN', 'WoRMSUpdatedRecord', 'DwCA_Taxon_Lookup/StreamMerge<-WoRMSUpdatedRecord', 62, 10).
port(24, 'OUT', 'MergedStream', 'DwCA_Taxon_Lookup/StreamMerge->MergedStream', 63, 12).
port(25, 'IN', 'Workspace', 'DwCA_Taxon_Lookup/CsvFileWriter<-Workspace', 67, 3).
port(26, 'IN', 'MergedStream', 'DwCA_Taxon_Lookup/CsvFileWriter<-MergedStream', 68, 12).
port(27, 'OUT', 'UpdatedOccurrenceFile', 'DwCA_Taxon_Lookup/CsvFileWriter->UpdatedOccurrenceFile', 69, 13).

% FACT: port_alias(port_id, alias).
port_alias(3, 'Workspace').

% FACT: port_uri_template(port_id, uri).
port_uri_template(2, 'file:packages/kurator_FileBranchingTaxonLookup/data/kurator_sample_data_v2.txt').
port_uri_template(4, 'file:{workspace}/darwinized_file.txt').
port_uri_template(8, 'file:runlog.log').
port_uri_template(11, 'file:runlog.log').
port_uri_template(14, 'file:runlog.log').
port_uri_template(18, 'file:runlog.log').
port_uri_template(21, 'file:runlog.log').
port_uri_template(27, 'file:{workspace}/mergedoutputfile.csv').

% FACT: has_in_port(block_id, port_id).
has_in_port(1, 1).
has_in_port(2, 2).
has_in_port(3, 5).
has_in_port(4, 7).
has_in_port(5, 10).
has_in_port(6, 13).
has_in_port(7, 16).
has_in_port(8, 19).
has_in_port(9, 22).
has_in_port(9, 23).
has_in_port(10, 25).
has_in_port(10, 26).

% FACT: has_out_port(block_id, port_id).
has_out_port(1, 28).
has_out_port(1, 29).
has_out_port(2, 3).
has_out_port(2, 4).
has_out_port(3, 6).
has_out_port(4, 8).
has_out_port(4, 9).
has_out_port(5, 11).
has_out_port(5, 12).
has_out_port(6, 14).
has_out_port(6, 15).
has_out_port(7, 17).
has_out_port(7, 18).
has_out_port(8, 20).
has_out_port(8, 21).
has_out_port(9, 24).
has_out_port(10, 27).

% FACT: data(data_id, data_name, qualified_data_name).
data(1, 'DarwinCoreArchive', 'DarwinCoreArchive').
data(14, 'UpdatedOccurrenceFile', 'UpdatedOccurrenceFile').
data(15, 'LogFile', 'LogFile').
data(2, 'DarwinCoreArchive', 'DwCA_Taxon_Lookup.DarwinCoreArchive').
data(3, 'Workspace', 'DwCA_Taxon_Lookup.Workspace').
data(4, 'OccurrenceFile', 'DwCA_Taxon_Lookup.OccurrenceFile').
data(5, 'DataRecord', 'DwCA_Taxon_Lookup.DataRecord').
data(6, 'LogFile', 'DwCA_Taxon_Lookup.LogFile').
data(7, 'TaggedDataRecord', 'DwCA_Taxon_Lookup.TaggedDataRecord').
data(8, 'MarineDataRecord', 'DwCA_Taxon_Lookup.MarineDataRecord').
data(9, 'notMarineDataRecord', 'DwCA_Taxon_Lookup.notMarineDataRecord').
data(10, 'WoRMSUpdatedRecord', 'DwCA_Taxon_Lookup.WoRMSUpdatedRecord').
data(11, 'GBIFUpdatedRecord', 'DwCA_Taxon_Lookup.GBIFUpdatedRecord').
data(12, 'MergedStream', 'DwCA_Taxon_Lookup.MergedStream').
data(13, 'UpdatedOccurrenceFile', 'DwCA_Taxon_Lookup.UpdatedOccurrenceFile').

% FACT: channel(channel_id, data_id).
channel(1, 2).
channel(2, 4).
channel(3, 5).
channel(4, 7).
channel(5, 7).
channel(6, 8).
channel(7, 9).
channel(8, 11).
channel(9, 10).
channel(10, 3).
channel(11, 12).
channel(12, 14).
channel(13, 15).
channel(14, 1).
channel(15, 13).
channel(16, 6).

% FACT: port_connects_to_channel(port_id, channel_id).
port_connects_to_channel(2, 1).
port_connects_to_channel(4, 2).
port_connects_to_channel(5, 2).
port_connects_to_channel(6, 3).
port_connects_to_channel(7, 3).
port_connects_to_channel(9, 4).
port_connects_to_channel(10, 4).
port_connects_to_channel(9, 5).
port_connects_to_channel(13, 5).
port_connects_to_channel(12, 6).
port_connects_to_channel(16, 6).
port_connects_to_channel(15, 7).
port_connects_to_channel(19, 7).
port_connects_to_channel(20, 8).
port_connects_to_channel(22, 8).
port_connects_to_channel(17, 9).
port_connects_to_channel(23, 9).
port_connects_to_channel(3, 10).
port_connects_to_channel(25, 10).
port_connects_to_channel(24, 11).
port_connects_to_channel(26, 11).
port_connects_to_channel(27, 12).
port_connects_to_channel(21, 13).
port_connects_to_channel(2, 14).
port_connects_to_channel(27, 15).
port_connects_to_channel(21, 16).

% FACT: inflow_connects_to_channel(port_id, channel_id).
inflow_connects_to_channel(1, 1).
inflow_connects_to_channel(1, 14).

% FACT: outflow_connects_to_channel(port_id, channel_id).
outflow_connects_to_channel(28, 12).
outflow_connects_to_channel(29, 13).
outflow_connects_to_channel(28, 15).
outflow_connects_to_channel(29, 16).

% FACT: uri_variable(uri_variable_id, variable_name, port_id).
uri_variable(1, 'workspace', 4).
uri_variable(2, 'workspace', 27).

% FACT: log_template(log_template_id, port_id, entry_template, log_annotation_id).
log_template(1, 8, '{timestamp} [{loglevel}] ACTOR<{actorname}> -> {ActorValue}:isMarine:true={isMarineValue}', 22).
log_template(2, 11, '{timestamp} [{loglevel}] ACTOR<{actorname}> -> [isMarine]=[true]:{matchMarineValue}. Passing occurrenceID={occurrenceID}', 30).
log_template(3, 14, '{timestamp} [{loglevel}] ACTOR<{actorname}> -> [isMarine]=[true]:{matchMarineValue}. Passing occurrenceID={occurrenceID}', 38).
log_template(4, 18, '{timestamp} [{loglevel}] ACTOR<{actorname}> -> Looking Up: {scientificName}:{scientificNameAuthorship}', 47).
log_template(5, 18, '{timestamp} [{loglevel}] ACTOR<{actorname}> -> Found GUID: {LookupValue}', 48).
log_template(6, 21, '{timestamp} [{loglevel}] ACTOR<{actorname}> -> Looking Up: {scientificName}:{scientificNameAuthorship}', 56).
log_template(7, 21, '{timestamp} [{loglevel}] ACTOR<{actorname}> -> Found GUID: {LookupValue}', 57).

% FACT: log_template_variable(log_variable_id, variable_name, log_template_id).
log_template_variable(1, 'timestamp', 1).
log_template_variable(2, 'loglevel', 1).
log_template_variable(3, 'actorname', 1).
log_template_variable(4, 'ActorValue', 1).
log_template_variable(5, 'isMarineValue', 1).
log_template_variable(6, 'timestamp', 2).
log_template_variable(7, 'loglevel', 2).
log_template_variable(8, 'actorname', 2).
log_template_variable(9, 'matchMarineValue', 2).
log_template_variable(10, 'occurrenceID', 2).
log_template_variable(11, 'timestamp', 3).
log_template_variable(12, 'loglevel', 3).
log_template_variable(13, 'actorname', 3).
log_template_variable(14, 'matchMarineValue', 3).
log_template_variable(15, 'occurrenceID', 3).
log_template_variable(16, 'timestamp', 4).
log_template_variable(17, 'loglevel', 4).
log_template_variable(18, 'actorname', 4).
log_template_variable(19, 'scientificName', 4).
log_template_variable(20, 'scientificNameAuthorship', 4).
log_template_variable(21, 'timestamp', 5).
log_template_variable(22, 'loglevel', 5).
log_template_variable(23, 'actorname', 5).
log_template_variable(24, 'LookupValue', 5).
log_template_variable(25, 'timestamp', 6).
log_template_variable(26, 'loglevel', 6).
log_template_variable(27, 'actorname', 6).
log_template_variable(28, 'scientificName', 6).
log_template_variable(29, 'scientificNameAuthorship', 6).
log_template_variable(30, 'timestamp', 7).
log_template_variable(31, 'loglevel', 7).
log_template_variable(32, 'actorname', 7).
log_template_variable(33, 'LookupValue', 7).

% FACT: assert(program_id, subject_id, predicate, object_id).

