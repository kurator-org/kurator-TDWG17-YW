:- import concat_atom/2 from string.

eol :- write('\n').

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% graphviz styles for YW prospective provenance graphs

gv_nodestyle__atomic_step :-
    write('node[shape=box style="filled" fillcolor="#CCFFCC" peripheries=1 fontname=Courier]'), eol.

gv_nodestyle__subworkflow :-
    gv_nodestyle__atomic_step.

% explicit empty/unused box/step
gv_nodestyle__atomic_unusedstep :-
    write('node[shape=box style="filled" fillcolor="#d6d6d7" peripheries=1 fontname=Courier]'), eol.

gv_nodestyle__unusedsubworkflow :-
    gv_nodestyle__atomic_unusedstep.

gv_node_style__data :-
    gv_nodestyle(box, 'rounded,filled', '#FFFFCC', 1, 'Helvetica').

gv_node_style__param :-
    gv_nodestyle(box, 'rounded,filled', '#FFFFFF', 1, 'Helvetica').

gv_node_style__workflow_port :-
    gv_nodestyle(circle, '#FFFFFF', 1, '0.2').
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% graphviz styles for YW(-NW) retrospective provenance graphs

gv_nodestyle__atomic_step_invocation :-
    write('node[shape=box style=filled fillcolor="#66883F" peripheries=1 fontname="Courier-Bold" fontcolor=white]'), eol.

% file-level observables
gv_nodestyle__datafile_value :-
        write('node[shape=box style="rounded,filled" fillcolor="#FFE4B5" peripheries=1 fontname="Courier-Bold" fontsize=9]'), eol.  

gv_nodestyle__param_value :-
    write('node[shape=box style="rounded,filled" fillcolor="#222222" peripheries=1 fontname="Helvetica-Bold"]'), eol.

% record-/data-level observables
gv_nodestyle__datarecord_value :-
        write('node[shape=box style="rounded,filled" fillcolor="#f8d2db" peripheries=1 fontname="Courier-Bold" fontsize=9]'), eol.
		
% explicit empty/unused data
gv_nodestyle__unuseddata :-
        write('node[shape=box style="rounded,filled" fillcolor="#d6d6d7" peripheries=1 fontname=Helvetica]'), eol.		

% aggregate data
gv_nodestyle__aggregatedata_onecount :- 
        write('node[shape=box style="rounded,filled" fillcolor="#3ab4df" peripheries=1 fontname=Helvetica]'), eol.	
gv_nodestyle__aggregatedata_twocounts :- 
        write('node[shape=box style="rounded,filled" fillcolor="#3ab4df" peripheries=1 fontname=Helvetica]'), eol.	
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% explicit empty/unused data candidates: gv_nodes__unuseddata_candidates(UnusedStepName, TaggedDataRecordValue) 
gv_nodes__unuseddata_candidates('MarineDataRecord', 'NonMarine').
gv_nodes__unuseddata_candidates('notMarineDataRecord', 'Marine').
gv_nodes__unuseddata_candidates('WoRMSUpdatedRecord', 'NonMarine').
gv_nodes__unuseddata_candidates('GBIFUpdatedRecord', 'Marine').

gv_nodes__unuseddata(OccurrenceID, UnusedDataName) :-
	log_record_data_value(_, _, OccurrenceID, _, TaggedDataRecordValue, _, _, _,_, _, _, _, _),
	gv_nodes__unuseddata_candidates(UnusedDataName, TaggedDataRecordValue),
	gv_labeled_node(UnusedDataName),
    fail
    ;
    true.
	


% explicit empty/unused box/step candidates: gv_nodes__atomic_steps_unusedstep_candidates(UnusedStepName, TaggedDataRecordValue) for gv_nodestyle__atomic_unusedstep 
gv_nodes__atomic_steps_unusedstep_candidates('FilterToJustMarine', 'NonMarine').
gv_nodes__atomic_steps_unusedstep_candidates('FilterExcludingMarine', 'Marine').
gv_nodes__atomic_steps_unusedstep_candidates('WoRMSLookup', 'NonMarine').
gv_nodes__atomic_steps_unusedstep_candidates('GBIFLookup', 'Marine').

gv_nodes__atomic_unusedstep(OccurrenceID, UnusedStepName) :-
	log_record_data_value(_, _, OccurrenceID, _, TaggedDataRecordValue, _, _, _,_, _, _, _, _),
	gv_nodes__atomic_steps_unusedstep_candidates(UnusedStepName, TaggedDataRecordValue),
	gv_labeled_node(UnusedStepName),
    fail
    ;
    true.


gv_nodes__atomic_steps(WorkflowId) :-
	yw_workflow_step(StepId, StepName, WorkflowId, _, _, _),
	not yw_workflow(StepId, _, _, _, _, _),
	gv_labeled_node(StepName),
    fail
    ;
    true.





yw_inflow_name_for_data_name(InflowName, DataName) :-
    concat_atom([DataName,'_inflow'], InflowName).

yw_outflow_name_for_data_name(OutflowName, DataName) :-
    concat_atom([DataName,'_outflow'], OutflowName).

gv_nodes__atomic_steps__upstream_of_data(WorkflowId, DataId) :-
    yw_data_downstream_of_step(StepId, DataId),
    yw_workflow_step(StepId, StepName, WorkflowId, _, _, _),
    gv_labeled_node(StepName),
    fail
    ;
    true.

gv_nodes__subworkflows(WorkflowId) :-
    yw_workflow(_, StepName, WorkflowId, _, _, _),
    gv_labeled_node(StepName),
    fail
    ;
    true.

gv_nodes__subworkflows__downstream_of_data(WorkflowId, DataId) :- 
    yw_workflow(StepId, StepName, WorkflowId, _, _, _),
    yw_step_downstream_of_data(StepId, DataId),
    gv_labeled_node(StepName),
    fail
    ;
    true.

gv_nodes__subworkflows__upstream_of_data(WorkflowId, DataId) :-
    yw_workflow(StepId, StepName, WorkflowId, _, _, _),
    yw_data_downstream_of_step(StepId, DataId),
    gv_labeled_node(StepName),
    fail
    ;
    true.

gv_nodes__atomic_steps__downstream_of_data(WorkflowId, DataId) :- 
    yw_step_downstream_of_data(StepId, DataId), 
    yw_workflow_step(StepId, StepName, WorkflowId, _, _, _),
    gv_labeled_node(StepName),
    fail
    ;
    true.

gv_nodes__data(WorkflowId) :-
    yw_data(DataId, DataName, WorkflowId, _),
    not yw_workflow_param(_, _, DataId, _),
    gv_labeled_node(DataName),
    fail
    ;
    true.

gv_node__data(DataId) :-
    yw_data(DataId, DataName, _, _),
    gv_labeled_node(DataName).

gv_nodes__data__upstream_of_data(WorkflowId, DownstreamDataId) :-
    yw_data(DataId, DataName, WorkflowId, _),
    not yw_workflow_param(_, _, DataId, _),
    yw_data_downstream(DataId, DownstreamDataId),
    gv_labeled_node(DataName),
    fail
    ;
    true.

gv_nodes__data__downstream_of_data(WorkflowId, UpstreamDataId) :- 

    yw_data(DataId, DataName, WorkflowId, _),
    not yw_workflow_param(_, _, DataId, _),
    yw_data_downstream(UpstreamDataId, DataId),
    gv_labeled_node(DataName),
    fail
    ;
    true.

gv_nodes__data_values__upstream_of_data_product(ProductDataId, ProductVarValue) :-
    data_values_upstream_of_data_product(ProductDataId, DataId, DataName, VarId, VarName, VarValue, ProductVarId, ProductVarName, ProductVarValue),
    nw_variable_for_yw_data(ProductVarId, ProductVarName, _, ProductDataId, _),
    not yw_data_only_used_as_param(DataId),
    concat_atom(['[data', DataId, '] ', DataName], Top),
    concat_atom(['[var', VarId, '] ', VarName, ' = ', VarValue], Bottom),
    gv_record_node(DataName, Top, Bottom),
    fail
    ;
    true.

gv_nodes__param_values__upstream_of_data_product(ProductDataId, ProductVarValue) :-
    data_values_upstream_of_data_product(ProductDataId, DataId, DataName, VarId, VarName, VarValue, ProductVarId, ProductVarName, ProductVarValue),
    nw_variable_for_yw_data(ProductVarId, ProductVarName, _, ProductDataId, _),
    yw_data_only_used_as_param(DataId),
    concat_atom(['[data', DataId, '] ', DataName], Top),
    concat_atom(['[var', VarId, '] ', VarName, ' = ', VarValue], Bottom),
    gv_record_node(DataName, Top, Bottom),
    fail
    ;
    true.

_gv_nodes__data_values__upstream_of_data_product(WorkflowId, DataProductId, DataProductName, DataProductValue) :-
    yw_data(DataId, _, WorkflowId, _),
    not yw_workflow_param(_, _, DataId, _),
    nw_variable_in_yw_lineage_of_nw_variable(_, DataId, DataName, VarId, VarName, Value, DataProductId, DataProductName, _, _, DataProductValue),
    concat_atom(['[data', DataId, '] ', DataName], Top),
    concat_atom(['[var', VarId, '] ', VarName, ' = ', Value], Bottom),
    gv_record_node(DataName, Top, Bottom),
    fail
    ;
    true.

_gv_nodes__param_values__upstream_of_data_product(WorkflowId, DataProductId, DataProductName, DataProductValue) :-
    yw_workflow_param(WorkflowId, _, DataId, _),
    nw_variable_in_yw_lineage_of_nw_variable(_, DataId, DataName, VarId, VarName, Value, DataProductId, DataProductName, _, _, DataProductValue),
    concat_atom(['[data', DataId, '] ', DataName], Top),
    concat_atom(['[var', VarId, '] ', VarName, ' = ', Value], Bottom),
    gv_record_node(DataName, Top, Bottom),
    fail
    ;
    true.

gv_nodes__params(WorkflowId) :-
    yw_workflow_param(WorkflowId, _, _, DataName),
    gv_labeled_node(DataName),
    fail
    ;
    true.

gv_nodes__params__upstream_of_data(WorkflowId, DownstreamDataId) :-
    yw_workflow_param(WorkflowId, _, DataId, DataName),
    yw_data_downstream(DataId, DownstreamDataId),
    gv_labeled_node(DataName),
    fail
    ;
    true.

gv_nodes__params__downstream_of_data(WorkflowId, UpstreamDataId) :- 
    yw_workflow_param(WorkflowId, _, DataId, DataName),
    yw_data_downstream(UpstreamDataId, DataId),
    gv_labeled_node(DataName),
    fail
    ;
    true.

gv_node__inflow(DataName) :-
    concat_atom([DataName,'_inflow'], InflowName),
    gv_unlabeled_node(InflowName).

gv_nodes__inflows(WorkflowId) :-
    yw_inflow_data(WorkflowId, _, _, DataName),
    gv_node__inflow(DataName),
    fail
    ;
    true.

gv_nodes__inflows__upstream_of_data(WorkflowId, DownstreamDataId) :-
    yw_inflow_data(WorkflowId, _, DataId, DataName),
    yw_data_downstream(DataId, DownstreamDataId),
    gv_node__inflow(DataName),
    fail
    ;
    true.

gv_nodes__outflows__downstream_of_data(WorkflowId, UpstreamDataId) :-
    yw_outflow_data(WorkflowId, _, DataId, DataName),
    yw_data_downstream(UpstreamDataId, DataId),
    gv_node__outflow(DataName),
    fail
    ;
    true.

gv_node__outflow(DataName) :-
    concat_atom([DataName,'_outflow'], OutflowName),
    gv_unlabeled_node(OutflowName).

gv_nodes__outflows(WorkflowId) :-
    yw_outflow_data(WorkflowId, _, _, DataName),
    gv_node__outflow(DataName),
    fail
    ;
    true.

gv_node__inflow_for_data(WorkflowId, DataId) :-
    yw_inflow_data(WorkflowId, _, DataId, DataName),
    gv_node__inflow(DataName),
    fail
    ;
    true.

gv_node__outflow_for_data(WorkflowId, DataId) :-
    yw_outflow_data(WorkflowId, _, DataId, DataName),
    gv_node__outflow(DataName),
    fail
    ;
    true.

gv_edges__data_to_data(WorkflowId) :-
    yw_data(DownstreamDataId, DownstreamDataName, WorkflowId, _),
    yw_data(UpstreamDataId, UpstreamDataName, WorkflowId, _),
    yw_data_immediately_downstream(UpstreamDataId, DownstreamDataId),
    gv_unlabeled_edge(UpstreamDataName, DownstreamDataName),
    fail
    ;
    true.

gv_edges__step_to_step(WorkflowId) :-
    yw_workflow_step(SourceProgramId, SourceProgramName, WorkflowId, _, _, _),
    yw_workflow_step(SinkProgramId, SinkProgramName, WorkflowId, _, _, _),
    yw_step_immediately_downstream(SourceProgramId, SinkProgramId),
    gv_unlabeled_edge(SourceProgramName, SinkProgramName),
    fail
    ;
    true.

gv_edges__data_to_step(WorkflowId) :-
    yw_data(DataId, DataName, WorkflowId, _),
    yw_workflow_step(StepId, StepName, WorkflowId, _, _, _),
    yw_step_input(StepId, _, _, _, _, DataId, _),
    gv_unlabeled_edge(DataName, StepName),
    fail
    ;
    true.

:- table yw_data_to_step_connection_upstream_of_data/4.
yw_data_to_step_connection_upstream_of_data(WorkflowId, DownstreamDataId, DataName, StepName) :-
    yw_data(DataId, DataName, WorkflowId, _),
    yw_workflow_step(StepId, StepName, WorkflowId, _, _, _),
    yw_step_input(StepId, _, _, _, _, DataId, _),
    yw_data_downstream_of_step(StepId, DownstreamDataId).

:- table yw_step_to_data_connection_downstream_of_data/4. 
yw_step_to_data_connection_downstream_of_data(WorkflowId, UpstreamDataId, DataName, StepName) :-
    yw_data(DataId, DataName, WorkflowId, _),
    yw_workflow_step(StepId, StepName, WorkflowId, _, _, _),
    yw_step_output(StepId, _, _, _, _, DataId, _),
    yw_step_downstream_of_data(StepId, UpstreamDataId).

gv_edges__data_to_step__upstream_of_data(WorkflowId, DownstreamDataId) :-
    yw_data_to_step_connection_upstream_of_data(WorkflowId, DownstreamDataId, DataName, StepName),
    gv_unlabeled_edge(DataName, StepName),
    fail
    ;
    true.

gv_edges__step_to_data__downstream_of_data(WorkflowId, UpstreamDataId) :- 
    yw_step_to_data_connection_downstream_of_data(WorkflowId, UpstreamDataId, DataName, StepName),
    gv_unlabeled_edge(StepName, DataName),
    fail
    ;
    true.

gv_edges__step_to_data(WorkflowId) :-
    yw_workflow_step(StepId, StepName, WorkflowId, _, _, _),
    yw_data(DataId, DataName, WorkflowId, _),
    yw_step_output(StepId, _, _, _, _, DataId, _),
    gv_unlabeled_edge(StepName, DataName),
    fail
    ;
    true.

gv_edges__step_to_data__upstream_of_data(WorkflowId, DownstreamDataId) :-
    yw_workflow_step(StepId, StepName, WorkflowId, _, _, _),
    yw_data(DataId, DataName, WorkflowId, _),
    yw_step_output(StepId, _, _, _, _, DataId, _),
    yw_data_downstream(DataId, DownstreamDataId),
    gv_unlabeled_edge(StepName, DataName),
    fail
    ;
    true.

gv_edges__data_to_step__downstream_of_data(WorkflowId, UpstreamDataId) :-
    yw_workflow_step(StepId, StepName, WorkflowId, _, _, _),
    yw_data(DataId, DataName, WorkflowId, _),
    yw_step_input(StepId, _, _, _, _, DataId, _),
    yw_data_downstream(UpstreamDataId, DataId),
    gv_unlabeled_edge(DataName, StepName),
    fail
    ;
    true.

gv_edges__inflow_to_step(WorkflowId) :-
    yw_inflow(WorkflowId, _, _, DataName, StepId, StepName),
    yw_workflow_step(StepId, StepName, WorkflowId, _, _, _),
    yw_inflow_name_for_data_name(InflowName, DataName),
    gv_unlabeled_edge(InflowName, StepName),
    fail
    ;
    true.

gv_edges__step_to_outflow(WorkflowId) :-
    yw_outflow(StepId, StepName, _, DataName, WorkflowId, _, _, _),
    yw_workflow_step(StepId, StepName, WorkflowId, _, _, _),
    yw_outflow_name_for_data_name(OutflowName, DataName),
    gv_unlabeled_edge(StepName, OutflowName),
    fail
    ;
    true.

gv_edges__inflow_to_data(WorkflowId) :-
    yw_inflow_data(WorkflowId, _, _, DataName),
    yw_inflow_name_for_data_name(InflowName, DataName),
    gv_unlabeled_edge(InflowName, DataName),
    fail
    ;
    true.

gv_edges__inflow_to_data__upstream_of_data(WorkflowId, DownstreamDataId) :-
    yw_inflow_data(WorkflowId, _, DataId, DataName),
    yw_data_downstream(DataId, DownstreamDataId),
    yw_inflow_name_for_data_name(InflowName, DataName),
    gv_unlabeled_edge(InflowName, DataName),
    fail
    ;
    true.

gv_edges__data_to_outflow(WorkflowId) :-
    yw_outflow_data(WorkflowId, _, _, DataName),
    yw_outflow_name_for_data_name(OutflowName, DataName),
    gv_unlabeled_edge(DataName, OutflowName),
    fail
    ;
    true.

gv_edges__data_to_outflow__upstream_of_data(WorkflowId, DataId) :-
    yw_outflow_data(WorkflowId, _, DataId, DataName),
    yw_outflow_name_for_data_name(OutflowName, DataName),
    gv_unlabeled_edge(DataName, OutflowName),
    fail
    ;
    true.


gv_edges__inflow_to_data__downstream_of_data(WorkflowId, DataId) :-
    yw_inflow_data(WorkflowId, _, DataId, DataName),
    yw_inflow_name_for_data_name(InflowName, DataName),
    gv_unlabeled_edge(InflowName, DataName),
    fail
    ;
    true.

gv_edges__data_to_outflow__downstream_of_data(WorkflowId, UpstreamDataId) :-
    yw_outflow_data(WorkflowId, _, DataId, DataName),
    yw_data_downstream(UpstreamDataId, DataId),
    yw_outflow_name_for_data_name(OutflowName, DataName),
    gv_unlabeled_edge(DataName, OutflowName),
    fail
    ;
    true.

gv_edges__nw_dependencies() :-
    dependency(_, _, _, SourceId, _, TargetId),
    variable(_, _, SourceId, SourceName, _, SourceValue, _),
    variable(_, _, TargetId, TargetName, _, TargetValue, _),
    concat_atom(['\"', SourceName, ' = ', SourceValue, '\"'], Source),
    concat_atom(['\"', TargetName, ' = ', TargetValue, '\"'], Target),
    gv_unlabeled_edge(Target, Source),
    fail
    ;
    true.

resource_group_by_dataId(X, Ys) :-
     setof(Y, data_uri_resource(X,Y), Ys).

print_all_resource_uri(X) :-
     data_uri_resource(X,Y),
     fmt_write('%S\\n', Y),
     fail
     ;
     true.


gv_nodes__inflow_recon__upstream_of_data(WorkflowId, DownstreamDataId) :-
    yw_data(DataId, DataName, WorkflowId, _),
    not yw_workflow_param(_, _, DataId, _),
    yw_inflow_data(WorkflowId, _, DataId, _),
    yw_data_downstream(DataId, DownstreamDataId),
    %concat_atom(['[data', DataId, '] ', DataName], Top),
	concat_atom([DataName], Top),
    gv_record_node_open(DataName, Top),
    gv_record_node_uri_list(DataId),
    gv_record_node_close,
    fail
    ;
    true.

gv_nodes__not_inflow_not_outflow_data__upstream_of_data(WorkflowId, DownstreamDataId) :-
    yw_data(DataId, DataName, WorkflowId, _),
    not yw_workflow_param(_, _, DataId, _),
    not yw_inflow_data(WorkflowId, _, DataId, _),
    not yw_outflow_data(WorkflowId, _, DataId, _),
    yw_data_downstream(DataId, DownstreamDataId),
    gv_labeled_node(DataName),
    fail
    ;
    true.

gv_nodes__outflow_recon__data(WorkflowId, DataId) :-
    yw_data(DataId, DataName, WorkflowId, _),
    not yw_workflow_param(_, _, DataId, _),
    yw_outflow_data(WorkflowId, _, DataId, _),
    %concat_atom(['[data', DataId, '] ', DataName], Top),
    concat_atom([DataName], Top),
	gv_record_node_open(DataName, Top),
    gv_record_node_uri_list(DataId),
    gv_record_node_close,
    fail
    ;
    true.


gv_nodes__recon_not_input_not_output_data(WorkflowId) :-
    yw_data(DataId, DataName, WorkflowId, _),
    not yw_workflow_param(_, _, DataId, _),
    not yw_inflow_data(WorkflowId, _, DataId, _),
    not yw_outflow_data(WorkflowId, _, DataId, _),
    gv_labeled_node(DataName),
    fail
    ;
    true.

% record-/data-level observables 
% DataName that will be represented at record level: yw_data_record_level(DataName)
yw_data_record_level('DataRecord').
yw_data_record_level('TaggedDataRecord').
yw_data_record_level('MarineDataRecord').
yw_data_record_level('notMarineDataRecord').
yw_data_record_level('WoRMSUpdatedRecord').
yw_data_record_level('GBIFUpdatedRecord').


print_data_record(OccurrenceID, DN) :-
	 log_record_data_value(_, _, OccurrenceID, _, _, _, _, _,_, _, _, _, _),
 	 data_record(OccurrenceID, DN, DR),
     fmt_write('%S\\n', DR),
     fail
     ;
     true.

print_aggregatedata_onecount(DN, Count) :-
	 aggregatedata_onecount_value(DN, Count),
 	 aggregatedata_onecount(DN),
     fmt_write('Count: %S\\n', Count),
     fail
     ;
     true.

print_aggregatedata_twocounts(DN, MatchCount, NoMatchCount) :-
	 aggregatedata_twocounts_value(DN, MatchCount, NoMatchCount),
 	 aggregatedata_twocounts(DN),
     fmt_write('Has Value: %S\\n Null: %S\\n', args(MatchCount, NoMatchCount)),
     fail
     ;
     true.

% explicit empty/unused data candidates: log_unuseddata_candidates(UnusedStepName, TaggedDataRecordValue) 
log_unuseddata_candidates('MarineDataRecord', 'NonMarine').
log_unuseddata_candidates('notMarineDataRecord', 'Marine').
log_unuseddata_candidates('WoRMSUpdatedRecord', 'NonMarine').
log_unuseddata_candidates('GBIFUpdatedRecord', 'Marine').

log_unuseddata(OccurrenceID, UnusedDataName) :-
	log_record_data_value(_, _, OccurrenceID, _, TaggedDataRecordValue, _, _, _,_, _, _, _, _),
	log_unuseddata_candidates(UnusedDataName, TaggedDataRecordValue).


% aggregatedata_onecount(AggregateDataNameOneCount)
aggregatedata_onecount('DataRecord').
aggregatedata_onecount('TaggedDataRecord').
aggregatedata_onecount('MarineDataRecord').
aggregatedata_onecount('notMarineDataRecord').

% aggregatedata_twocounts(AggregateDataNameTwoCounts)
aggregatedata_twocounts('WoRMSUpdatedRecord').
aggregatedata_twocounts('GBIFUpdatedRecord').

% aggregatedata_onecount_value(AggregateDataNameOneCount, Count)
aggregatedata_onecount_value('DataRecord', RecordCount) :-
	aggregatedata_onecount('DataRecord'),
	log_record_count(RecordCount).
aggregatedata_onecount_value('TaggedDataRecord', RecordCount) :-
	aggregatedata_onecount('TaggedDataRecord'),
	log_record_count(RecordCount).
aggregatedata_onecount_value('MarineDataRecord', MarineCount) :-
	aggregatedata_onecount('MarineDataRecord'),
	log_marine_record_count(MarineCount).
aggregatedata_onecount_value('notMarineDataRecord', NonMarineCount) :-
	aggregatedata_onecount('notMarineDataRecord'),
	log_nonmarine_record_count(NonMarineCount).
% aggregatedata_twocounts_value(AggregateDataNameOneCount, MatchCount, NoMatchCount)
aggregatedata_twocounts_value('WoRMSUpdatedRecord', MarineMatchCount, MarineNoMatchCount):- 
	log_marine_match_count(MarineMatchCount),
	log_marine_nomatch_count(MarineNoMatchCount).
aggregatedata_twocounts_value('GBIFUpdatedRecord', NonMarineMatchCount, NonMarineNoMatchCount) :-
	log_nonmarine_match_count(NonMarineMatchCount),
	log_nonmarine_nomatch_count(NonMarineNoMatchCount).

gv_nodes__recon_not_input_not_output_aggregatedata_onecount :-
	aggregatedata_onecount_value(DN, Count),
	aggregatedata_onecount(DN),
	% not log_unuseddata(OccurrenceID, DN) ,
	concat_atom(DN, Top),
    gv_record_node_open(DN, Top),
	gv_aggregatedata_node_onecount(DN, Count),
	gv_record_node_close,
	fail
    ;
    true.

gv_nodes__recon_not_input_not_output_aggregatedata_twocounts :-
	aggregatedata_twocounts_value(DN, MatchCount, NoMatchCount),
	aggregatedata_twocounts(DN),
	% not log_unuseddata(OccurrenceID, DN) ,
	concat_atom([DN], Top),
    gv_record_node_open(DN, Top),
	gv_aggregatedata_node_twocounts(DN, MatchCount, NoMatchCount),
	gv_record_node_close,
	fail
    ;
    true.


gv_nodes__recon_not_input_not_output_datarecord(OccurrenceID) :-
	log_record_data_value(_, _, OccurrenceID, _, _, _, _, _,_, _, _, _, _),
	yw_data_record_level(DN),
	% not log_unuseddata(OccurrenceID, DN) ,
	concat_atom([DN], Top),
    gv_record_node_open(DN, Top),
	gv_record_node_data_record(OccurrenceID, DN),
	gv_record_node_close,
	fail
    ;
    true.


gv_nodes__input_recon_data(WorkflowId) :-
    yw_data_used_as_in(DataId),
    yw_inflow_data(WorkflowId, _, DataId, DataName),
    %concat_atom(['[data', DataId, '] ', DataName], Top),
	concat_atom([DataName], Top),
    gv_record_node_open(DataName, Top),
    gv_record_node_uri_list(DataId),
    gv_record_node_close,
    fail
    ;
    true.

gv_nodes__output_recon_data(WorkflowId) :-
    yw_data(DataId, DataName, WorkflowId, _),
    not yw_workflow_param(_, _, DataId, _),
    yw_outflow_data(WorkflowId, _, DataId, _),
    %concat_atom(['[data', DataId, '] ', DataName], Top),
    concat_atom([DataName], Top),
	gv_record_node_open(DataName, Top),
    gv_record_node_uri_list(DataId),
    gv_record_node_close,
    fail
    ;
    true.
